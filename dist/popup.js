const a={enabled:!0,branchNameStructure:"${prefix}/TP-${id}-${slug}"},i="branchNameGeneratorSettings";async function r(){try{if(typeof chrome<"u"&&chrome.storage&&chrome.storage.local){const t=await chrome.storage.local.get(i);if(t[i])return{...a,...t[i]}}else{const t=localStorage.getItem(i);if(t)return{...a,...JSON.parse(t)}}}catch(t){console.warn("Failed to load settings:",t)}return{...a}}async function n(t){try{return typeof chrome<"u"&&chrome.storage&&chrome.storage.local&&await chrome.storage.local.set({[i]:t}),localStorage.setItem(i,JSON.stringify(t)),!0}catch(e){return console.error("Failed to save settings:",e),!1}}async function l(t,e){const c={...await r(),[t]:e};return await n(c)}class u{constructor(){this.settings=null,this.init()}async init(){this.settings=await r(),this.bindElements(),this.loadSettings(),this.bindEvents(),this.updatePreview()}bindElements(){this.enableToggle=document.getElementById("enableToggle"),this.structureInput=document.getElementById("structureInput"),this.previewText=document.getElementById("previewText"),this.resetBtn=document.getElementById("resetBtn"),this.saveBtn=document.getElementById("saveBtn"),this.status=document.getElementById("status")}loadSettings(){this.settings.enabled?this.enableToggle.classList.add("active"):this.enableToggle.classList.remove("active"),this.structureInput.value=this.settings.branchNameStructure}bindEvents(){this.enableToggle.addEventListener("click",async()=>{this.settings.enabled=!this.settings.enabled,this.settings.enabled?this.enableToggle.classList.add("active"):this.enableToggle.classList.remove("active"),await this.updateSetting("enabled",this.settings.enabled)}),this.structureInput.addEventListener("input",async e=>{this.settings.branchNameStructure=e.target.value,this.updatePreview(),await this.updateSetting("branchNameStructure",e.target.value)}),this.resetBtn.addEventListener("click",async()=>{await this.resetToDefault()}),this.saveBtn.addEventListener("click",async()=>{await this.saveAllSettings()})}updatePreview(){const s=this.structureInput.value.replace(/\$\{prefix\}/g,"feat").replace(/\$\{id\}/g,"1234").replace(/\$\{slug\}/g,"example-task-title");this.previewText.textContent=s||"Enter a valid structure..."}async updateSetting(e,s){await l(e,s),this.settings[e]=s}async resetToDefault(){this.settings={enabled:!0,branchNameStructure:"${prefix}/TP-${id}-${slug}"},this.loadSettings(),this.updatePreview(),await n(this.settings),this.showStatus("Settings reset to default!","success")}async saveAllSettings(){await n(this.settings)?this.showStatus("Settings saved successfully!","success"):this.showStatus("Failed to save settings!","error")}showStatus(e,s){this.status.textContent=e,this.status.className=`status ${s}`,this.status.style.display="block",setTimeout(()=>{this.status.style.display="none"},3e3)}}document.addEventListener("DOMContentLoaded",()=>{new u});
